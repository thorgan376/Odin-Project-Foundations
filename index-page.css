/* Universal Selector
The universal selector will select elements of any type, hence the name “universal”,
and the syntax for it is a simple asterisk * . In the example below, every element would
have the color: purple; style applied to it. */
* {
  color: purple;
}
/* ------------------------------------------------------------------------------------------------ */
/* Type Selectors

A type selector (or element selector) 
will select all elements of the given 
element type, and the syntax is just 
the name of the element: */
div {
  color: white;
  background-color: black;
}
/* ------------------------------------------------------------------------------------------------ */
/* Class Selectors

Class selectors will select all elements 
with the given class, which is just an attribute
you place on an HTML element. Here’s how you add 
a class to an HTML tag and select it in CSS: */

/* Classes aren’t required to be specific to a particular element,
 so you can use the same class on as many elements as you want. */
/* You can also add multiple classes to a single element as a space-separated list,
 such as class="alert-text severe-alert" */
.alert-text {
  color: red;
}
/* ------------------------------------------------------------------------------------------------ */
/* ID Selectors

ID selectors are similar to class selectors. 
They select an element with the given ID, which is another attribute you place on an HTML element. 
The major difference between classes and IDs is that an element can only have one ID. 
It cannot be repeated on a single page and should not contain any whitespace: */

#title {
  color: blue;
}
/* Chỉ nên dùng attribute ID cho element trong trường hợp cần thiết sparingly 
Như là taking advantage of specificity or having links redirect to a section on the current page */

.alpha {
  background-color: white;
}
/* ------------------------------------------------------------------------------------------------ */
/* The Grouping Selector

What if we have two groups of elements
that share some of their style declarations? */

.read {
  color: white;
  background-color: black;
  /* several unique declarations */
}

.unread {
  color: white;
  background-color: black;
  /* several unique declarations */
}

/* Both our .read and .unread selectors 
share the color: white; and background-color: black; declarations, 
ut otherwise have several of their own unique declarations. 
To cut down on the repetition, we can group these two selectors together as a comma-separated list: */
.read,
.unread {
  color: white;
  background-color: black;
}

.read {
  text-decoration: underline;
  /* several unique declarations */
}

.unread {
  text-decoration: overline;
  /* several unique declarations */
}

/* Both of the examples above (with and without grouping) 
will have the same result, but the second example 
reduces the repetition of declarations and makes it easier
to edit either the color or background-color for both classes at once.
*/
/* ------------------------------------------------------------------------------------------------ */

/* Chaining Selectors

Another way to use selectors is to chain them 
as a list without any separation. */
/* chaining classes */
.subsection.header {
  color: black;
  background-color: white;
}
/* What .subsection.header does is it selects any element that has
BOTH the subsection and header classes. Notice how 
there isn’t any space between the .subsection and .header class selectors. 
This syntax basically works for chaining any combination of selectors,
except for chaining more than one type selector like div, p or h1,... */

/* chaining classes with id */
.subsection#preview {
  color: blueviolet;
  background-color: aquamarine;
}
/* In general, you can’t chain more than one type selector
 since an element can’t be two different types at once. 
 For example, chaining two type selectors like div and p would give us the selector divp, 
 which wouldn’t work since the selector would try to find a literal <divp> element, which doesn’t exist. */

/* ------------------------------------------------------------------------------------------------ */
/* Descendant Combinator */
/* Combinators allow us to combine multiple selectors differently than either grouping or chaining them,
as they show a relationship between the selectors. There are four types of combinators in total,
but for right now we’re going to only show you the descendant combinator,
which is represented in CSS by a single space between selectors.
A descendant combinator will only cause elements that match the last selector to be selected
if they also have an ancestor (parent, grandparent, etc) that matches the previous selector. */

/* So something like .ancestor .child would select an element with the class child 
if it has an ancestor with the class ancestor. Another way to think of 
it is child will only be selected if it is nested inside of ancestor, no matter how deep.*/
.ancestor .child .contents {
  background-color: aquamarine;
  color: bisque;
}
/* There’s really no limit to how many combinators you can add to a rule, so .one
 .two .three .four would be totally valid. This would just select an element that
  has a class of four if it has an ancestor with a class of three, 
  and if that ancestor has its own ancestor with a class of two, and so on. 
  You generally want to avoid trying to select elements that need this level 
  of nesting, though, as it can get pretty confusing and long, and it can cause 
  issues when it comes to specificity. */

/* ------------------------------------------------------------------------------------------------ */
/* Order Matters */
/* When two selectors have the same level of specificity, the rule 
that is defined last has the most precedence; 
that is, the last rule overrides any rules before it.  
Take a look at the following example:*/

.first_declared, .last_declared {
  background-color: rgb(20, 50, 10);
  font-weight: 800;
}
.first_declared {
  color: white;
  font-size: 32px;
}

.last_declared {
  font-size: 46px;
  font-weight: 800;
}
/* In the above example, the selector last_declared would override 
the first_declared selector. Any html element with BOTH OF THOSE CLASSES
Example <div class="first_declared last_declared"></div> 
would have the styles defined in .last_declared instead of .first_declared.*/

/* ------------------------------------------------------------------------------------------------ */
/* Properties to Get Started With */
/* Color and Background-Color */

/* Both of these properties can accept one of several kinds of values.
 A common one is a keyword, such as an actual color name like red 
 or the transparent keyword. They also accept HEX, RGB, and HSL values, 
 which you may be familiar with if you’ve ever used a photoshop program 
 or a site where you could customize your profile colors. */
 h6 {
  color: #9990ff;
 }
/* Trong trường hợp này thì cái viết sau sẽ là cái được tác dụng 
 - biến thành màu đỏ
 Vì theo quy tắc Order Matter, cái sau sẽ overide cái trước */
 h6 {
  color: red;
 }  
 h6 {
  color:rgb(20, 50, 10)
 }
 h6{
  color: coral;
 }

 /* Take a quick look at CSS Legal Color Values:
 https://www.w3schools.com/cssref/css_colors_legal.php
 to see how you can
 adjust the opacity of these colors by adding an alpha value. */

 /* font-family */
 /* font-size */
 /* font-weight */
 /* text-align */

 /* Image Height and Width */
 /* By default, an <img> element’s height and width values 
will be the same as the actual image file’s height and width. 
If you wanted to adjust the size of the image without 
causing it to lose its proportions, you would use a value of “auto” 
for the height property and adjust the width value: */
img {
  height: 200px;
  width: 300px;
}
/* It’s best to include both of these properties for <img> elements,
 even if you don’t plan on adjusting the values from the image file’s original
 ones. When these values aren’t included, if an image takes longer to load
 than the rest of the page contents, the image won’t take up any space 
 on the page at first, but will suddenly cause a drastic shift of the 
 other page contents once it does load in. Explicitly stating 
 a height and width prevents this from happening, as space will 
 be “reserved” on the page and will just appear as a blank space 
 until the image loads. */

 /* Adding CSS to HTML:
 - External CSS: Seperate CSS File
 - Internal CSS: Place inside html file, in 
 <head>
  <style>
    div {
      ....
    } the same as the external method
  </style>
 </head>
 - Inline CSS: ( Not recommended ) Place inside directly to HTML Elements:
 + style attribute
  */